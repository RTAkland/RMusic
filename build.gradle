plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

configurations {
    embed
    compile.extendsFrom(embed)
}


dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation("net.fabricmc:fabric-language-kotlin:${ktFbVer}")
    implementation("com.github.goxr3plus:java-stream-player:10.0.2")
    implementation("org.jflac:jflac-codec:1.5.2")
    implementation("com.google.code.gson:gson:2.10.1")
    implementation("com.squareup.okhttp3:okhttp:5.0.0-alpha.11")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")

    embed(api("com.github.goxr3plus:java-stream-player:10.0.2"))
    embed(api("org.jflac:jflac-codec:1.5.2"))
    embed(api("com.squareup.okhttp3:okhttp:5.0.0-alpha.11"))
    embed(api("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"))
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from configurations.embed.collect {
        it.isDirectory() ? it : zipTree(it)
    }
    from("LICENSE") {
        rename { it }
    }
}